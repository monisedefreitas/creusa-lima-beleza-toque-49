
import { supabase } from '@/integrations/supabase/client';

export const getWhatsAppMessage = async (templateType: string, variables: Record<string, string> = {}): Promise<string> => {
  try {
    // First try to get a specific template from the database
    const { data: template } = await supabase
      .from('message_templates')
      .select('content, variables')
      .eq('type', templateType)
      .eq('is_active', true)
      .eq('is_default', true)
      .single();

    if (template) {
      let message = template.content;
      
      // Replace variables in the template
      if (template.variables && Array.isArray(template.variables)) {
        template.variables.forEach((variable: string) => {
          const value = variables[variable] || `{${variable}}`;
          message = message.replace(new RegExp(`\\{${variable}\\}`, 'g'), value);
        });
      }

      return message;
    }

    // Fallback to default templates if no database template found
    return getDefaultTemplate(templateType, variables);
  } catch (error) {
    console.error('Error fetching message template:', error);
    return getDefaultTemplate(templateType, variables);
  }
};

export const getAvailableVariables = (): string[] => {
  return [
    'client_name',
    'appointment_date',
    'appointment_time',
    'services_list',
    'total_price',
    'clinic_name',
    'clinic_phone',
    'clinic_address',
    'new_date',
    'new_time'
  ];
};

export const getVariableDescriptions = (): Record<string, string> => {
  return {
    'client_name': 'Nome do cliente',
    'appointment_date': 'Data da consulta',
    'appointment_time': 'Hora da consulta',
    'services_list': 'Lista de servi√ßos',
    'total_price': 'Pre√ßo total',
    'clinic_name': 'Nome da cl√≠nica',
    'clinic_phone': 'Telefone da cl√≠nica',
    'clinic_address': 'Endere√ßo da cl√≠nica',
    'new_date': 'Nova data (reagendamento)',
    'new_time': 'Nova hora (reagendamento)'
  };
};

export const processMessageTemplate = (template: string, variables: Record<string, string>): string => {
  let processedTemplate = template;
  
  // Replace variables in the format {{variable_name}}
  Object.entries(variables).forEach(([key, value]) => {
    const regex = new RegExp(`{{${key}}}`, 'g');
    processedTemplate = processedTemplate.replace(regex, value);
  });
  
  return processedTemplate;
};

const getDefaultTemplate = (templateType: string, variables: Record<string, string>): string => {
  const { 
    clientName = '{clientName}', 
    appointmentDate = '{appointmentDate}', 
    appointmentTime = '{appointmentTime}',
    serviceName = '{serviceName}',
    totalPrice = '{totalPrice}',
    businessName = 'Nossa Empresa',
    businessPhone = '+351 123 456 789',
    businessAddress = 'Rua Principal, 123',
    newDate = '{newDate}',
    newTime = '{newTime}'
  } = variables;

  const templates: Record<string, string> = {
    confirmation: `üåü Ol√° ${clientName}!

‚úÖ A sua marca√ß√£o foi confirmada:
üìÖ Data: ${appointmentDate}
üïê Hora: ${appointmentTime}
üíÖ Servi√ßo: ${serviceName}
üí∞ Valor: ‚Ç¨${totalPrice}

üìç Localiza√ß√£o: ${businessAddress}

Em caso de d√∫vidas, contacte-nos atrav√©s do ${businessPhone}.

At√© breve! üíñ`,

    reminder: `üîî Lembrete da sua consulta

Ol√° ${clientName}! 

Lembramos que tem uma consulta marcada para amanh√£:
üìÖ ${appointmentDate} √†s ${appointmentTime}
üíÖ Servi√ßo: ${serviceName}

üìç ${businessAddress}

Caso necessite reagendar, contacte-nos pelo ${businessPhone}.

At√© amanh√£! ‚ú®`,

    completion: `‚ú® Obrigada pela sua visita!

Ol√° ${clientName}! 

Esperamos que tenha ficado satisfeita com o nosso servi√ßo de ${serviceName}! 

üåü A sua opini√£o √© muito importante para n√≥s! 
üìù Pode deixar a sua avalia√ß√£o no nosso site: https://www.nossaempresa.com

At√© √† pr√≥xima! üíñ

${businessName}
${businessPhone}`,

    cancellation: `‚ùå Marca√ß√£o Cancelada

Ol√° ${clientName},

A sua marca√ß√£o do dia ${appointmentDate} √†s ${appointmentTime} foi cancelada.

Se desejar reagendar, contacte-nos pelo ${businessPhone}.

Obrigada pela compreens√£o! 

${businessName}`,

    rescheduling: `üìÖ Marca√ß√£o Reagendada

Ol√° ${clientName}!

A sua consulta foi reagendada com sucesso:

üîÑ Nova data: ${newDate}
üïê Nova hora: ${newTime}
üíÖ Servi√ßo: ${serviceName}

üìç Local: ${businessAddress}

Obrigada pela compreens√£o!

${businessName}
${businessPhone}`,

    welcome: `üåü Bem-vinda ao ${businessName}!

Ol√° ${clientName}!

Obrigada por escolher os nossos servi√ßos! 

üì± Pode acompanhar as suas marca√ß√µes atrav√©s do nosso site
üìû Para d√∫vidas: ${businessPhone}
üìç Morada: ${businessAddress}

Estamos ansiosas por receb√™-la! üíñ`,

    follow_up: `üíñ Como est√° a sentir-se?

Ol√° ${clientName}!

J√° passaram alguns dias desde a sua √∫ltima visita para ${serviceName}.

Como est√° a sentir-se com o resultado? 

üåü Adorar√≠amos saber a sua opini√£o no nosso site: https://www.nossaempresa.com

Para marcar a sua pr√≥xima consulta: ${businessPhone}

${businessName}`,

    promotion: `üéâ Oferta Especial para Si!

Ol√° ${clientName}!

Temos uma promo√ß√£o especial que pode interessar-lhe! 

üíÖ [Detalhes da promo√ß√£o]
üìÖ V√°lida at√©: [Data]

Para marcar: ${businessPhone}
Ou visite-nos em: ${businessAddress}

${businessName}`,

    birthday: `üéÇ Feliz Anivers√°rio!

Ol√° ${clientName}!

Hoje √© um dia especial e quer√≠amos desejar-lhe um Feliz Anivers√°rio! üéâ

üéÅ Temos uma surpresa especial para si!
üìû Contacte-nos: ${businessPhone}

Que tenha um dia maravilhoso! ‚ú®

${businessName}`,

    no_show: `‚ùì Sentimos a sua falta

Ol√° ${clientName},

Hoje esper√°vamos por si para a consulta das ${appointmentTime}, mas infelizmente n√£o compareceu.

Se aconteceu algum imprevisto, compreendemos! 

üìû Para reagendar: ${businessPhone}

${businessName}`,

    whatsapp_confirmation: `üåü Ol√° ${clientName}!

‚úÖ A sua marca√ß√£o foi confirmada:
üìÖ Data: ${appointmentDate}
üïê Hora: ${appointmentTime}
üíÖ Servi√ßo: ${serviceName}
üí∞ Valor: ‚Ç¨${totalPrice}

üìç Localiza√ß√£o: ${businessAddress}

Em caso de d√∫vidas, contacte-nos atrav√©s do ${businessPhone}.

At√© breve! üíñ`,

    review_request: `‚ú® Obrigada pela sua visita!

Ol√° ${clientName}! 

Esperamos que tenha ficado satisfeita com o nosso servi√ßo de ${serviceName}! 

üåü A sua opini√£o √© muito importante para n√≥s! 
üìù Pode deixar a sua avalia√ß√£o no nosso site: https://www.nossaempresa.com

At√© √† pr√≥xima! üíñ

${businessName}
${businessPhone}`
  };

  return templates[templateType] || `Ol√° ${clientName}, obrigada por escolher os nossos servi√ßos!`;
};

export const formatWhatsAppUrl = (phone: string, message: string): string => {
  const cleanPhone = phone.replace(/\D/g, '');
  const encodedMessage = encodeURIComponent(message);
  return `https://wa.me/${cleanPhone}?text=${encodedMessage}`;
};

export const createWhatsAppLink = async (phone: string, templateType: string, variables: Record<string, string> = {}): Promise<string> => {
  const message = await getWhatsAppMessage(templateType, variables);
  return formatWhatsAppUrl(phone, message);
};
